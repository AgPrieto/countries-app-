{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Usuario\\\\Desktop\\\\frontend\\\\src\\\\Components\\\\CountryInfo.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CountryInfo = () => {\n  _s();\n  const {\n    countryCode\n  } = useParams();\n  const [countryInfo, setCountryInfo] = useState(null);\n  useEffect(() => {\n    const fetchCountryInfo = async () => {\n      try {\n        const response = await fetch(`https://restcountries.com/v3.1/alpha/${countryCode}`);\n        const data = await response.json();\n        setCountryInfo(data[0]);\n      } catch (error) {\n        console.error('Error al obtener la información del país:', error);\n      }\n    };\n    fetchCountryInfo();\n  }, [countryCode]);\n  if (!countryInfo) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Cargando informaci\\xF3n...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 28\n  }, this);\n  const {\n    flags,\n    name,\n    population,\n    borders\n  } = countryInfo;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: name.common\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: flags[0],\n      alt: `Flag of ${name.common}`,\n      width: \"100\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Fronteras:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 10\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), borders ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: borders.map((borderCode, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: borderCode\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }, this) // Aquí puedes poner los nombres de los países que hacen frontera si los tienes disponibles\n      )\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No hay fronteras disponibles.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Poblaci\\xF3n:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 10\n      }, this), \" \", population.toLocaleString()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n_s(CountryInfo, \"ahnuQQdN65QRZC2b0E4P41TJYOw=\", false, function () {\n  return [useParams];\n});\n_c = CountryInfo;\nexport default CountryInfo;\nvar _c;\n$RefreshReg$(_c, \"CountryInfo\");","map":{"version":3,"names":["React","useEffect","useState","useParams","jsxDEV","_jsxDEV","CountryInfo","_s","countryCode","countryInfo","setCountryInfo","fetchCountryInfo","response","fetch","data","json","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","flags","name","population","borders","common","src","alt","width","map","borderCode","index","toLocaleString","_c","$RefreshReg$"],"sources":["C:/Users/Usuario/Desktop/frontend/src/Components/CountryInfo.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nconst CountryInfo = () => {\r\n  const { countryCode } = useParams();\r\n  const [countryInfo, setCountryInfo] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchCountryInfo = async () => {\r\n      try {\r\n        const response = await fetch(`https://restcountries.com/v3.1/alpha/${countryCode}`);\r\n        const data = await response.json();\r\n        setCountryInfo(data[0]);\r\n      } catch (error) {\r\n        console.error('Error al obtener la información del país:', error);\r\n      }\r\n    };\r\n\r\n    fetchCountryInfo();\r\n  }, [countryCode]);\r\n\r\n  if (!countryInfo) return <p>Cargando información...</p>;\r\n\r\n  const {\r\n    flags,\r\n    name,\r\n    population,\r\n    borders,\r\n  } = countryInfo;\r\n\r\n  return (\r\n    <div>\r\n      <h2>{name.common}</h2>\r\n      <img src={flags[0]} alt={`Flag of ${name.common}`} width=\"100\" />\r\n      <p><strong>Fronteras:</strong></p>\r\n      {borders ? (\r\n        <ul>\r\n          {borders.map((borderCode, index) => (\r\n            <li key={index}>{borderCode}</li> // Aquí puedes poner los nombres de los países que hacen frontera si los tienes disponibles\r\n          ))}\r\n        </ul>\r\n      ) : (\r\n        <p>No hay fronteras disponibles.</p>\r\n      )}\r\n      <p><strong>Población:</strong> {population.toLocaleString()}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CountryInfo;\r\n\r\n\r\n\r\n  \r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}