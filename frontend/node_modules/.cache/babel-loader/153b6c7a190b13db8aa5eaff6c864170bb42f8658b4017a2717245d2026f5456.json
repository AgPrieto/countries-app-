{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Usuario\\\\Desktop\\\\frontend\\\\src\\\\Components\\\\CountryInfo.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CountryInfo = () => {\n  _s();\n  const {\n    countryCode\n  } = useParams(); // Obtener countryCode desde la URL\n  const [countryInfo, setCountryInfo] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  useEffect(() => {\n    const fetchCountryInfo = async () => {\n      try {\n        const response = await axios.get(`http://localhost:5000/api/countries/country-info/${countryCode}`);\n        setCountryInfo(response.data);\n        setLoading(false);\n      } catch (error) {\n        setError('Error al obtener la información del país');\n        setLoading(false);\n      }\n    };\n    if (countryCode) {\n      fetchCountryInfo();\n    }\n  }, [countryCode]);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Cargando informaci\\xF3n...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 21\n  }, this);\n  if (!countryInfo) return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: countryInfo.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: countryInfo.flagUrl,\n      alt: `Bandera de ${countryInfo.name}`,\n      style: {\n        width: '100px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Pa\\xEDses vecinos:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 10\n      }, this), \" \", countryInfo.borders.join(', ')]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Poblaci\\xF3n:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 10\n      }, this), \" \", countryInfo.populationData.map(pop => `${pop.year}: ${pop.population}`).join(', ')]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_s(CountryInfo, \"T0orve6z3NZA3CBHlOkap2n4vQc=\", false, function () {\n  return [useParams];\n});\n_c = CountryInfo;\nexport default CountryInfo;\nvar _c;\n$RefreshReg$(_c, \"CountryInfo\");","map":{"version":3,"names":["React","useState","useEffect","axios","useParams","jsxDEV","_jsxDEV","CountryInfo","_s","countryCode","countryInfo","setCountryInfo","loading","setLoading","error","setError","fetchCountryInfo","response","get","data","children","fileName","_jsxFileName","lineNumber","columnNumber","name","src","flagUrl","alt","style","width","borders","join","populationData","map","pop","year","population","_c","$RefreshReg$"],"sources":["C:/Users/Usuario/Desktop/frontend/src/Components/CountryInfo.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nconst CountryInfo = () => {\r\n  const { countryCode } = useParams();  // Obtener countryCode desde la URL\r\n  const [countryInfo, setCountryInfo] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState('');\r\n\r\n  useEffect(() => {\r\n    const fetchCountryInfo = async () => {\r\n      try {\r\n        const response = await axios.get(`http://localhost:5000/api/countries/country-info/${countryCode}`);\r\n        setCountryInfo(response.data);\r\n        setLoading(false);\r\n      } catch (error) {\r\n        setError('Error al obtener la información del país');\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    if (countryCode) {\r\n      fetchCountryInfo();\r\n    }\r\n  }, [countryCode]);\r\n\r\n  if (loading) return <div>Cargando información...</div>;\r\n  if (error) return <div>{error}</div>;\r\n  if (!countryInfo) return null;\r\n\r\n  return (\r\n    <div>\r\n      <h2>{countryInfo.name}</h2>\r\n      <img src={countryInfo.flagUrl} alt={`Bandera de ${countryInfo.name}`} style={{ width: '100px' }} />\r\n      <p><strong>Países vecinos:</strong> {countryInfo.borders.join(', ')}</p>\r\n      <p><strong>Población:</strong> {countryInfo.populationData.map((pop) => `${pop.year}: ${pop.population}`).join(', ')}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CountryInfo;\r\n\r\n\r\n  \r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}