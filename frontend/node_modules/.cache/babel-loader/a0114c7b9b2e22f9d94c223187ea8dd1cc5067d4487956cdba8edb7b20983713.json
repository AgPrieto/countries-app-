{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Usuario\\\\Desktop\\\\frontend\\\\src\\\\Components\\\\CountryInfo.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\n\n// Registrar los componentes de Chart.js\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nconst CountryInfo = () => {\n  _s();\n  const {\n    countryCode\n  } = useParams();\n  const [countryInfo, setCountryInfo] = useState(null);\n  const [borders, setBorders] = useState([]);\n  const [flag, setFlag] = useState('');\n  const [populationData, setPopulationData] = useState({\n    labels: [],\n    datasets: []\n  });\n  useEffect(() => {\n    const fetchCountryInfo = async () => {\n      try {\n        var _flagData$data$find;\n        const response = await fetch(`https://restcountries.com/v3.1/alpha/${countryCode}`);\n        const data = await response.json();\n        setCountryInfo(data[0]);\n        const flagResponse = await fetch('https://countriesnow.space/api/v0.1/countries/flag/images');\n        const flagData = await flagResponse.json();\n        const countryFlag = (_flagData$data$find = flagData.data.find(country => country.iso2 === countryCode)) === null || _flagData$data$find === void 0 ? void 0 : _flagData$data$find.flag;\n        setFlag(countryFlag);\n        const borderNames = await Promise.all(data[0].borders.map(async borderCode => {\n          const res = await fetch(`https://restcountries.com/v3.1/alpha/${borderCode}`);\n          const borderData = await res.json();\n          return {\n            name: borderData[0].name.common,\n            code: borderData[0].cca2\n          };\n        }));\n        setBorders(borderNames);\n        const populationResponse = await fetch('https://countriesnow.space/api/v0.1/countries/population');\n        const populationData = await populationResponse.json();\n        let countryPopulation = null;\n        for (let i = 0; i < populationData.data.length; i++) {\n          const populationGroup = populationData.data[i];\n          if (populationGroup.country.toLowerCase() === data[0].name.common.toLowerCase()) {\n            countryPopulation = populationGroup;\n            break;\n          }\n        }\n        if (countryPopulation) {\n          const years = countryPopulation.populationCounts.map(entry => entry.year);\n          const populations = countryPopulation.populationCounts.map(entry => entry.value);\n          setPopulationData({\n            labels: years,\n            datasets: [{\n              label: `${data[0].name.common} Population Over Time`,\n              data: populations,\n              fill: false,\n              borderColor: 'rgb(75, 192, 192)',\n              tension: 0.1\n            }]\n          });\n        } else {\n          console.log('No se encontraron datos de población para este país');\n        }\n      } catch (error) {\n        console.error('Error al obtener la información del país:', error);\n      }\n    };\n    fetchCountryInfo();\n  }, [countryCode]);\n  if (!countryInfo) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Cargando informaci\\xF3n...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 28\n  }, this);\n  const {\n    name,\n    population\n  } = countryInfo;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: name.common\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), flag ? /*#__PURE__*/_jsxDEV(\"img\", {\n      src: flag,\n      alt: `Bandera de ${name.common}`,\n      width: \"100\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Bandera no disponible\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Fronteras:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 10\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), borders.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: borders.map((border, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: `/country/${border.code}`,\n          className: \"text-blue-600 hover:underline\",\n          children: border.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 15\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No hay fronteras disponibles.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Gr\\xE1fico de poblaci\\xF3n a lo largo del tiempo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), populationData.labels.length > 0 ? /*#__PURE__*/_jsxDEV(Line, {\n        data: populationData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No hay datos de poblaci\\xF3n disponibles para este pa\\xEDs.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-4\",\n      children: /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/\",\n        className: \"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600\",\n        children: \"Return to country list\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n};\n_s(CountryInfo, \"ZJCy8z8Gp/Lh7T407gKWjKwpDhQ=\", false, function () {\n  return [useParams];\n});\n_c = CountryInfo;\nexport default CountryInfo;\nvar _c;\n$RefreshReg$(_c, \"CountryInfo\");","map":{"version":3,"names":["React","useEffect","useState","useParams","Link","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","CountryInfo","_s","countryCode","countryInfo","setCountryInfo","borders","setBorders","flag","setFlag","populationData","setPopulationData","labels","datasets","fetchCountryInfo","_flagData$data$find","response","fetch","data","json","flagResponse","flagData","countryFlag","find","country","iso2","borderNames","Promise","all","map","borderCode","res","borderData","name","common","code","cca2","populationResponse","countryPopulation","i","length","populationGroup","toLowerCase","years","populationCounts","entry","year","populations","value","label","fill","borderColor","tension","console","log","error","children","fileName","_jsxFileName","lineNumber","columnNumber","population","src","alt","width","border","index","to","className","_c","$RefreshReg$"],"sources":["C:/Users/Usuario/Desktop/frontend/src/Components/CountryInfo.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useParams, Link } from 'react-router-dom';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\r\n\r\n// Registrar los componentes de Chart.js\r\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\r\n\r\nconst CountryInfo = () => {\r\n  const { countryCode } = useParams();\r\n  const [countryInfo, setCountryInfo] = useState(null);\r\n  const [borders, setBorders] = useState([]); \r\n  const [flag, setFlag] = useState(''); \r\n  const [populationData, setPopulationData] = useState({ labels: [], datasets: [] });\r\n\r\n  useEffect(() => {\r\n    const fetchCountryInfo = async () => {\r\n      try {\r\n     \r\n        const response = await fetch(`https://restcountries.com/v3.1/alpha/${countryCode}`);\r\n        const data = await response.json();\r\n        setCountryInfo(data[0]);\r\n  \r\n      \r\n        const flagResponse = await fetch('https://countriesnow.space/api/v0.1/countries/flag/images');\r\n        const flagData = await flagResponse.json();\r\n  \r\n    \r\n        const countryFlag = flagData.data.find(country => country.iso2 === countryCode)?.flag;\r\n        setFlag(countryFlag);\r\n  \r\n  \r\n        const borderNames = await Promise.all(\r\n          data[0].borders.map(async (borderCode) => {\r\n            const res = await fetch(`https://restcountries.com/v3.1/alpha/${borderCode}`);\r\n            const borderData = await res.json();\r\n            return {\r\n              name: borderData[0].name.common,\r\n              code: borderData[0].cca2, \r\n            };\r\n          })\r\n        );\r\n        setBorders(borderNames); \r\n  \r\n\r\n        const populationResponse = await fetch('https://countriesnow.space/api/v0.1/countries/population');\r\n        const populationData = await populationResponse.json();\r\n  \r\n\r\n        let countryPopulation = null;\r\n        for (let i = 0; i < populationData.data.length; i++) {\r\n          const populationGroup = populationData.data[i];\r\n  \r\n         \r\n          if (populationGroup.country.toLowerCase() === data[0].name.common.toLowerCase()) {\r\n            countryPopulation = populationGroup;\r\n            break;\r\n          }\r\n        }\r\n  \r\n\r\n        if (countryPopulation) {\r\n          const years = countryPopulation.populationCounts.map(entry => entry.year);\r\n          const populations = countryPopulation.populationCounts.map(entry => entry.value);\r\n\r\n  \r\n          setPopulationData({\r\n            labels: years,\r\n            datasets: [\r\n              {\r\n                label: `${data[0].name.common} Population Over Time`,\r\n                data: populations,\r\n                fill: false,\r\n                borderColor: 'rgb(75, 192, 192)',\r\n                tension: 0.1,\r\n              },\r\n            ],\r\n          });\r\n        } else {\r\n          console.log('No se encontraron datos de población para este país');\r\n        }\r\n        \r\n      } catch (error) {\r\n        console.error('Error al obtener la información del país:', error);\r\n      }\r\n    };\r\n  \r\n    fetchCountryInfo();\r\n  }, [countryCode]);\r\n\r\n  if (!countryInfo) return <p>Cargando información...</p>;\r\n\r\n  const {\r\n    name,\r\n    population,\r\n  } = countryInfo;\r\n   \r\n  return (\r\n    <div>\r\n      <h2>{name.common}</h2>\r\n      {flag ? (\r\n        <img src={flag} alt={`Bandera de ${name.common}`} width=\"100\" />\r\n      ) : (\r\n        <p>Bandera no disponible</p>\r\n      )}\r\n      <p><strong>Fronteras:</strong></p>\r\n      {borders.length > 0 ? (\r\n        <ul>\r\n          {borders.map((border, index) => (\r\n            <li key={index}>\r\n              <Link to={`/country/${border.code}`} className=\"text-blue-600 hover:underline\">\r\n                {border.name}\r\n              </Link>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      ) : (\r\n        <p>No hay fronteras disponibles.</p>\r\n      )}\r\n\r\n \r\n      <div>\r\n        <h3>Gráfico de población a lo largo del tiempo</h3>\r\n        {populationData.labels.length > 0 ? (\r\n          <Line data={populationData} />\r\n        ) : (\r\n          <p>No hay datos de población disponibles para este país.</p>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"mt-4\">\r\n        <Link to=\"/\" className=\"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600\">\r\n          Return to country list\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CountryInfo;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  \r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}