{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Usuario\\\\Desktop\\\\frontend\\\\src\\\\Components\\\\CountryInfo.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nconst PopulationChart = ({\n  countryCode\n}) => {\n  _s();\n  const [populationData, setPopulationData] = useState([]);\n  useEffect(() => {\n    const fetchPopulationData = async () => {\n      try {\n        const response = await fetch(`https://countriesnow.space/api/v0.1/countries/population`);\n        const data = await response.json();\n\n        // Encuentra los datos para el país específico\n        const countryData = data.data.find(country => country.country === countryCode);\n        if (countryData) {\n          const populationCounts = countryData.populationCounts;\n          console.log('Datos de población para', countryCode, populationCounts); // Logear los datos de población\n          setPopulationData(populationCounts);\n        }\n      } catch (error) {\n        console.error('Error al obtener los datos de población:', error);\n      }\n    };\n    fetchPopulationData();\n  }, [countryCode]);\n\n  // Preparar los datos para el gráfico\n  const chartData = {\n    labels: populationData.map(item => item.year),\n    datasets: [{\n      label: 'Población',\n      data: populationData.map(item => item.value),\n      borderColor: 'rgba(75,192,192,1)',\n      backgroundColor: 'rgba(75,192,192,0.2)',\n      tension: 0.4\n    }]\n  };\n\n  // Opciones del gráfico\n  const chartOptions = {\n    responsive: true,\n    maintainAspectRatio: false\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: 'relative',\n      height: '400px',\n      width: '100%'\n    },\n    children: /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData,\n      options: chartOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n_s(PopulationChart, \"NEaG5VU6kFtudDFA6LViIJkCG5k=\");\n_c = PopulationChart;\nexport default PopulationChart;\nvar _c;\n$RefreshReg$(_c, \"PopulationChart\");","map":{"version":3,"names":["React","useEffect","useState","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","PopulationChart","countryCode","_s","populationData","setPopulationData","fetchPopulationData","response","fetch","data","json","countryData","find","country","populationCounts","console","log","error","chartData","labels","map","item","year","datasets","label","value","borderColor","backgroundColor","tension","chartOptions","responsive","maintainAspectRatio","style","position","height","width","children","options","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Usuario/Desktop/frontend/src/Components/CountryInfo.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Line } from 'react-chartjs-2'; \r\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\r\n\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nconst PopulationChart = ({ countryCode }) => {\r\n  const [populationData, setPopulationData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchPopulationData = async () => {\r\n      try {\r\n        const response = await fetch(`https://countriesnow.space/api/v0.1/countries/population`);\r\n        const data = await response.json();\r\n\r\n        // Encuentra los datos para el país específico\r\n        const countryData = data.data.find(country => country.country === countryCode);\r\n        if (countryData) {\r\n          const populationCounts = countryData.populationCounts;\r\n          console.log('Datos de población para', countryCode, populationCounts); // Logear los datos de población\r\n          setPopulationData(populationCounts);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error al obtener los datos de población:', error);\r\n      }\r\n    };\r\n\r\n    fetchPopulationData();\r\n  }, [countryCode]);\r\n\r\n  // Preparar los datos para el gráfico\r\n  const chartData = {\r\n    labels: populationData.map(item => item.year),\r\n    datasets: [\r\n      {\r\n        label: 'Población',\r\n        data: populationData.map(item => item.value),\r\n        borderColor: 'rgba(75,192,192,1)',\r\n        backgroundColor: 'rgba(75,192,192,0.2)',\r\n        tension: 0.4\r\n      }\r\n    ]\r\n  };\r\n\r\n  // Opciones del gráfico\r\n  const chartOptions = {\r\n    responsive: true,\r\n    maintainAspectRatio: false, \r\n  };\r\n\r\n  return (\r\n    <div style={{ position: 'relative', height: '400px', width: '100%' }}>\r\n      <Line data={chartData} options={chartOptions} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PopulationChart;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  \r\n\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,IAAI,QAAQ,iBAAiB;AACtC,SAASC,KAAK,IAAIC,OAAO,EAAEC,aAAa,EAAEC,WAAW,EAAEC,YAAY,EAAEC,WAAW,EAAEC,KAAK,EAAEC,OAAO,EAAEC,MAAM,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3HT,OAAO,CAACU,QAAQ,CACdT,aAAa,EACbC,WAAW,EACXC,YAAY,EACZC,WAAW,EACXC,KAAK,EACLC,OAAO,EACPC,MACF,CAAC;AAED,MAAMI,eAAe,GAAGA,CAAC;EAAEC;AAAY,CAAC,KAAK;EAAAC,EAAA;EAC3C,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAExDD,SAAS,CAAC,MAAM;IACd,MAAMoB,mBAAmB,GAAG,MAAAA,CAAA,KAAY;MACtC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,0DAA0D,CAAC;QACxF,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;;QAElC;QACA,MAAMC,WAAW,GAAGF,IAAI,CAACA,IAAI,CAACG,IAAI,CAACC,OAAO,IAAIA,OAAO,CAACA,OAAO,KAAKX,WAAW,CAAC;QAC9E,IAAIS,WAAW,EAAE;UACf,MAAMG,gBAAgB,GAAGH,WAAW,CAACG,gBAAgB;UACrDC,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEd,WAAW,EAAEY,gBAAgB,CAAC,CAAC,CAAC;UACvET,iBAAiB,CAACS,gBAAgB,CAAC;QACrC;MACF,CAAC,CAAC,OAAOG,KAAK,EAAE;QACdF,OAAO,CAACE,KAAK,CAAC,0CAA0C,EAAEA,KAAK,CAAC;MAClE;IACF,CAAC;IAEDX,mBAAmB,CAAC,CAAC;EACvB,CAAC,EAAE,CAACJ,WAAW,CAAC,CAAC;;EAEjB;EACA,MAAMgB,SAAS,GAAG;IAChBC,MAAM,EAAEf,cAAc,CAACgB,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACC,IAAI,CAAC;IAC7CC,QAAQ,EAAE,CACR;MACEC,KAAK,EAAE,WAAW;MAClBf,IAAI,EAAEL,cAAc,CAACgB,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACI,KAAK,CAAC;MAC5CC,WAAW,EAAE,oBAAoB;MACjCC,eAAe,EAAE,sBAAsB;MACvCC,OAAO,EAAE;IACX,CAAC;EAEL,CAAC;;EAED;EACA,MAAMC,YAAY,GAAG;IACnBC,UAAU,EAAE,IAAI;IAChBC,mBAAmB,EAAE;EACvB,CAAC;EAED,oBACEhC,OAAA;IAAKiC,KAAK,EAAE;MAAEC,QAAQ,EAAE,UAAU;MAAEC,MAAM,EAAE,OAAO;MAAEC,KAAK,EAAE;IAAO,CAAE;IAAAC,QAAA,eACnErC,OAAA,CAACX,IAAI;MAACqB,IAAI,EAAES,SAAU;MAACmB,OAAO,EAAER;IAAa;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7C,CAAC;AAEV,CAAC;AAACtC,EAAA,CAjDIF,eAAe;AAAAyC,EAAA,GAAfzC,eAAe;AAmDrB,eAAeA,eAAe;AAAC,IAAAyC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}