{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Usuario\\\\Desktop\\\\frontend\\\\src\\\\Components\\\\CountryInfo.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CountryInfo = () => {\n  _s();\n  const {\n    countryCode\n  } = useParams();\n  const [countryInfo, setCountryInfo] = useState(null);\n  const [borders, setBorders] = useState([]);\n  const [flag, setFlag] = useState('');\n  useEffect(() => {\n    const fetchCountryInfo = async () => {\n      try {\n        var _flagData$data$find;\n        const response = await fetch(`https://restcountries.com/v3.1/alpha/${countryCode}`);\n        const data = await response.json();\n        setCountryInfo(data[0]);\n        const flagResponse = await fetch(`https://countriesnow.space/api/v0.1/countries/flag/images`);\n        const flagData = await flagResponse.json();\n        const flagUrl = (_flagData$data$find = flagData.data.find(country => country.countryCode === countryCode)) === null || _flagData$data$find === void 0 ? void 0 : _flagData$data$find.flag;\n        setFlag(flagUrl);\n        const borderNames = await Promise.all(data[0].borders.map(async borderCode => {\n          const res = await fetch(`https://restcountries.com/v3.1/alpha/${borderCode}`);\n          const borderData = await res.json();\n          return borderData[0].name.common;\n        }));\n        setBorders(borderNames);\n      } catch (error) {\n        console.error('Error al obtener la información del país:', error);\n      }\n    };\n    fetchCountryInfo();\n  }, [countryCode]);\n  if (!countryInfo) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Cargando informaci\\xF3n...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 28\n  }, this);\n  const {\n    name,\n    population\n  } = countryInfo;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: name.common\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), flag ? /*#__PURE__*/_jsxDEV(\"img\", {\n      src: flag,\n      alt: `Flag of ${name.common}`,\n      width: \"100\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Bandera no disponible\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Fronteras:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 10\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), borders.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: borders.map((border, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: border\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }, this) // Mostrar países fronterizos\n      )\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No hay fronteras disponibles.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Poblaci\\xF3n:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 10\n      }, this), \" \", population.toLocaleString()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(CountryInfo, \"prd8LdR7+KeEFCVS6vX9KFzrrO4=\", false, function () {\n  return [useParams];\n});\n_c = CountryInfo;\nexport default CountryInfo;\nvar _c;\n$RefreshReg$(_c, \"CountryInfo\");","map":{"version":3,"names":["React","useEffect","useState","useParams","jsxDEV","_jsxDEV","CountryInfo","_s","countryCode","countryInfo","setCountryInfo","borders","setBorders","flag","setFlag","fetchCountryInfo","_flagData$data$find","response","fetch","data","json","flagResponse","flagData","flagUrl","find","country","borderNames","Promise","all","map","borderCode","res","borderData","name","common","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","population","src","alt","width","length","border","index","toLocaleString","_c","$RefreshReg$"],"sources":["C:/Users/Usuario/Desktop/frontend/src/Components/CountryInfo.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nconst CountryInfo = () => {\r\n  const { countryCode } = useParams();\r\n  const [countryInfo, setCountryInfo] = useState(null);\r\n  const [borders, setBorders] = useState([]); \r\n  const [flag, setFlag] = useState(''); \r\n\r\n  useEffect(() => {\r\n    const fetchCountryInfo = async () => {\r\n      try {\r\n        const response = await fetch(`https://restcountries.com/v3.1/alpha/${countryCode}`);\r\n        const data = await response.json();\r\n        setCountryInfo(data[0]);\r\n\r\n        \r\n        const flagResponse = await fetch(`https://countriesnow.space/api/v0.1/countries/flag/images`);\r\n        const flagData = await flagResponse.json();\r\n        const flagUrl = flagData.data.find(country => country.countryCode === countryCode)?.flag;\r\n        setFlag(flagUrl);\r\n\r\n      \r\n        const borderNames = await Promise.all(\r\n          data[0].borders.map(async (borderCode) => {\r\n            const res = await fetch(`https://restcountries.com/v3.1/alpha/${borderCode}`);\r\n            const borderData = await res.json();\r\n            return borderData[0].name.common;\r\n          })\r\n        );\r\n\r\n        setBorders(borderNames); \r\n      } catch (error) {\r\n        console.error('Error al obtener la información del país:', error);\r\n      }\r\n    };\r\n\r\n    fetchCountryInfo();\r\n  }, [countryCode]);\r\n\r\n  if (!countryInfo) return <p>Cargando información...</p>;\r\n\r\n  const {\r\n    name,\r\n    population,\r\n  } = countryInfo;\r\n\r\n  return (\r\n    <div>\r\n      <h2>{name.common}</h2>\r\n      {flag ? (\r\n        <img src={flag} alt={`Flag of ${name.common}`} width=\"100\" />\r\n      ) : (\r\n        <p>Bandera no disponible</p>\r\n      )}\r\n      <p><strong>Fronteras:</strong></p>\r\n      {borders.length > 0 ? (\r\n        <ul>\r\n          {borders.map((border, index) => (\r\n            <li key={index}>{border}</li> // Mostrar países fronterizos\r\n          ))}\r\n        </ul>\r\n      ) : (\r\n        <p>No hay fronteras disponibles.</p>\r\n      )}\r\n      <p><strong>Población:</strong> {population.toLocaleString()}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CountryInfo;\r\n\r\n\r\n\r\n\r\n\r\n  \r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}